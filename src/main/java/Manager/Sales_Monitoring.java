/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Manager;

//import Manager_Class_File.Manager_SalesMonitor;
//import Manager_Class_File.Manager_SalesRecord;
import Class_File.Booking_Class;
import Class_File.FILE_IO;
import Class_File.SalesClass;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.IsoFields;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Sales_Monitoring extends javax.swing.JPanel {
    protected List<Booking_Class> AllBooking = new ArrayList<>(); 

    /**
     * Creates new form Weekly_Sales
     */
    public Sales_Monitoring() {
        initComponents();
        FILE_IO F = new FILE_IO();
        Set<String> uniqueYears = new HashSet<>();
        try {
            List<SalesClass> Sales = F.getAllSales();
                for (SalesClass Sale : Sales) {
                String year = String.valueOf(Sale.getPayment_Time().getYear());  // Extract only the year
                uniqueYears.add(year);  // Add to Set (no duplicates)
            }

            // Now populate the combo box with unique years
            for (String year : uniqueYears) {
                cbo_SM_salesyear.addItem(year);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main_Panel = new javax.swing.JPanel();
        pn_SM_content = new javax.swing.JPanel();
        lbl_Title1 = new javax.swing.JLabel();
        lbl_SM_content3 = new javax.swing.JLabel();
        cbo_SM_salestype = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_SM_salesresult = new javax.swing.JTable();
        lbl_SM_content4 = new javax.swing.JLabel();
        cbo_SM_salesyear = new javax.swing.JComboBox<>();

        setLayout(new java.awt.CardLayout());

        main_Panel.setLayout(new java.awt.CardLayout());

        lbl_Title1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbl_Title1.setText("Sales Monitoring");

        lbl_SM_content3.setText("View Sales By :");

        cbo_SM_salestype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Weekly", "Monthly", "Yearly" }));
        cbo_SM_salestype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbo_SM_salestypeActionPerformed(evt);
            }
        });

        tbl_SM_salesresult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Week", "Total Sales", "NO. of Booking"
            }
        ));
        jScrollPane1.setViewportView(tbl_SM_salesresult);

        lbl_SM_content4.setText("View Sales for Year:");

        cbo_SM_salesyear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbo_SM_salesyearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pn_SM_contentLayout = new javax.swing.GroupLayout(pn_SM_content);
        pn_SM_content.setLayout(pn_SM_contentLayout);
        pn_SM_contentLayout.setHorizontalGroup(
            pn_SM_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_SM_contentLayout.createSequentialGroup()
                .addGroup(pn_SM_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_SM_contentLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(pn_SM_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_Title1)
                            .addGroup(pn_SM_contentLayout.createSequentialGroup()
                                .addComponent(lbl_SM_content3)
                                .addGap(18, 18, 18)
                                .addComponent(cbo_SM_salestype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)
                                .addComponent(lbl_SM_content4)
                                .addGap(18, 18, 18)
                                .addComponent(cbo_SM_salesyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pn_SM_contentLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        pn_SM_contentLayout.setVerticalGroup(
            pn_SM_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_SM_contentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Title1)
                .addGap(18, 18, 18)
                .addGroup(pn_SM_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_SM_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_SM_content4)
                        .addComponent(cbo_SM_salesyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pn_SM_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_SM_content3)
                        .addComponent(cbo_SM_salestype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        main_Panel.add(pn_SM_content, "card2");

        add(main_Panel, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void cbo_SM_salestypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbo_SM_salestypeActionPerformed
        String selectedItem = cbo_SM_salestype.getSelectedItem().toString();
        String selectedYear = cbo_SM_salesyear.getSelectedItem().toString();

        setTableColumnsBasedOnSalesType(selectedItem, selectedYear);

    }//GEN-LAST:event_cbo_SM_salestypeActionPerformed

    private void cbo_SM_salesyearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbo_SM_salesyearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbo_SM_salesyearActionPerformed
                                            
    // Method to populate the year combo box based on the Booking file

    
    // Method to dynamically set table columns based on the selected sales type
    private void setTableColumnsBasedOnSalesType(String salesType, String selectedYear) {
        DefaultTableModel model = (DefaultTableModel) tbl_SM_salesresult.getModel();

        // Clear the existing columns and rows
        model.setRowCount(0);  // Clear rows
        model.setColumnCount(0); // Clear columns
        
//        System.out.println("Selected Sales Type: " + salesType + ", Selected Year: " + selectedYear);

        // Set new columns based on the sales type
        switch (salesType) {
            case "Weekly":
                model.setColumnIdentifiers(new String[] { "Week Number", "Total Sales", "Total Bookings" });
                populateWeeklySales(selectedYear, model); // Populate table with weekly sales
                break;
            case "Monthly":
                model.setColumnIdentifiers(new String[] { "Month", "Total Sales", "Total Bookings" });
                populateMonthlySales(selectedYear, model);
                break;
            case "Yearly":
                model.setColumnIdentifiers(new String[] { "Year", "Total Sales", "Total Bookings" });
                populateYearlySales(selectedYear, model);
                break;
            default:
                throw new IllegalArgumentException("Invalid sales type selected.");
        }
    }

    // Method to populate the table with weekly sales data for the selected year
    private void populateWeeklySales(String selectedYear, DefaultTableModel model) {
        FILE_IO F = new FILE_IO(); // Assuming you have a class for file I/O

        try {
            List<SalesClass> allSales = F.getAllSales(); // Get all sales data
            Map<Integer, Double> weeklySalesMap = new HashMap<>(); // To store total sales per week
            Map<Integer, Integer> weeklyBookingsMap = new HashMap<>(); // To store total bookings per week

            // Debugging line
//            System.out.println("All Sales Retrieved: " + allSales.size() + " records.");
            
            for (SalesClass sale : allSales) {
                LocalDate paymentTime = sale.getPayment_Time();
                
                

                // Check if the sale is in the selected year
                if (String.valueOf(paymentTime.getYear()).equals(selectedYear)) {
                    int weekNumber = paymentTime.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR); // Get the week number

                    double amount = sale.getAmount(); // Get the sale amount

                    // Accumulate total sales and bookings for the week
                    weeklySalesMap.put(weekNumber, weeklySalesMap.getOrDefault(weekNumber, 0.0) + amount);
                    weeklyBookingsMap.put(weekNumber, weeklyBookingsMap.getOrDefault(weekNumber, 0) + 1);
                }
            }
            

            // Populate the model with the results
            for (int week : weeklySalesMap.keySet()) {
                double totalSales = weeklySalesMap.get(week);
                int totalBookings = weeklyBookingsMap.get(week);
              
                
                model.addRow(new Object[] { week, totalSales, totalBookings });
            }

        } catch (Exception e) {
            e.printStackTrace();
            // Handle the exception accordingly
        }
    }
    
    private void populateMonthlySales(String selectedYear, DefaultTableModel model) {
        FILE_IO F = new FILE_IO();

        try {
            List<SalesClass> allSales = F.getAllSales(); // 获取所有销售数据
            Map<Integer, Double> monthlySalesMap = new HashMap<>(); // 存储每个月的销售总额
            Map<Integer, Integer> monthlyBookingsMap = new HashMap<>(); // 存储每个月的订单总数

            for (SalesClass sale : allSales) {
                LocalDate paymentTime = sale.getPayment_Time();
                if (String.valueOf(paymentTime.getYear()).equals(selectedYear)) { // 根据选择的年份过滤
                    int monthNumber = paymentTime.getMonthValue(); // 获取月份
                    double amount = sale.getAmount(); // 获取销售金额

                    // 累计每个月的销售总额和订单数
                    monthlySalesMap.put(monthNumber, monthlySalesMap.getOrDefault(monthNumber, 0.0) + amount);
                    monthlyBookingsMap.put(monthNumber, monthlyBookingsMap.getOrDefault(monthNumber, 0) + 1);
                }
            }

            // 使用调试信息来追踪过程
            System.out.println("Monthly Sales Map: " + monthlySalesMap);
            System.out.println("Monthly Bookings Map: " + monthlyBookingsMap);

            // 将统计结果填充到表格模型中
            for (int month : monthlySalesMap.keySet()) {
                double totalSales = monthlySalesMap.get(month);
                int totalBookings = monthlyBookingsMap.get(month);
                model.addRow(new Object[] { month, totalSales, totalBookings });
            }

        } catch (Exception e) {
            e.printStackTrace();
            // 处理异常
        }
    }
    
    private void populateYearlySales(String selectedYear, DefaultTableModel model) {
        FILE_IO F = new FILE_IO();

        try {
            List<SalesClass> allSales = F.getAllSales(); // 获取所有销售数据
            double totalSales = 0.0; // 存储该年份的销售总额
            int totalBookings = 0; // 存储该年份的订单总数

            for (SalesClass sale : allSales) {
                LocalDate paymentTime = sale.getPayment_Time();
                if (String.valueOf(paymentTime.getYear()).equals(selectedYear)) { // 根据选择的年份过滤
                    totalSales += sale.getAmount(); // 累加销售总额
                    totalBookings++; // 统计订单总数
                }
            }

            // 使用调试信息来追踪过程
            System.out.println("Total Sales for Year " + selectedYear + ": " + totalSales);
            System.out.println("Total Bookings for Year " + selectedYear + ": " + totalBookings);

            // 将统计结果填充到表格模型中
            model.addRow(new Object[] { selectedYear, totalSales, totalBookings });

        } catch (Exception e) {
            e.printStackTrace();
            // 处理异常
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbo_SM_salestype;
    private javax.swing.JComboBox<String> cbo_SM_salesyear;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_SM_content3;
    private javax.swing.JLabel lbl_SM_content4;
    private javax.swing.JLabel lbl_Title1;
    private javax.swing.JPanel main_Panel;
    private javax.swing.JPanel pn_SM_content;
    private javax.swing.JTable tbl_SM_salesresult;
    // End of variables declaration//GEN-END:variables
}
